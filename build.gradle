plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'nl.greenadine'
version = '0.6'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'spigotmc'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'codemc'
        url = 'https://repo.codemc.io/repository/maven-public/'
    }
    maven {
        name = 'aikar'
        url = 'https://repo.aikar.co/content/groups/aikar/'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.19.2-R0.1-SNAPSHOT' // Paper API
    implementation 'org.bstats:bstats-bukkit:3.0.0'

    implementation 'co.aikar:acf-paper:0.5.1-SNAPSHOT' // Paper command framework

    /* Plugin libraries */
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7' // Economy
    compileOnly 'com.gmail.filoghost.holographicdisplays:holographicdisplays-api:2.4.9' // Holograms

    /* JSON libraries */
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'

    /* Other libraries */
    implementation 'com.google.guava:guava:31.1-jre'
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

jar {
    manifest {
        attributes(
                'Main-Class' : 'nl.greenadine.echobot.Main',
                'Implementation-Version' : this.version
        )
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

build.dependsOn shadowJar